<?php

class Tsnwoperation extends WolfMVC\Base {

    public $version = "0.1";

    /**
     * @readwrite
     * @var stdClass
     */
    protected $_analyzedrequest;
    private $_model;

    /**
     * @readwrite
     * @var string
     */
    protected $_contentType = "";

    public function __construct($options = array()) {
        $this->_model = new Tsnwmodel();
        parent::__construct($options);
    }

    protected function anti_injection($input) {
        $pulito = strip_tags(addslashes(trim($input)));
        $pulito = str_replace("'", "\'", $pulito);
        $pulito = str_replace('"', '\"', $pulito);
        $pulito = str_replace(';', '\;', $pulito);
        $pulito = str_replace('--', '\--', $pulito);
        $pulito = str_replace('+', '\+', $pulito);
        $pulito = str_replace('(', '\(', $pulito);
        $pulito = str_replace(')', '\)', $pulito);
        $pulito = str_replace('=', '\=', $pulito);
        $pulito = str_replace('>', '\>', $pulito);
        $pulito = str_replace('<', '\<', $pulito);
        return $pulito;
    }


    private function getPrefix($type) {
        $idPrefix = "";
        $tmpvm = $this->_model->extractByPath($type);
        if ($tmpvm && isset($tmpvm["vtiger_module"]) && isset($tmpvm["vtiger_module"]["idPrefix"]))
        {
            $idPrefix = $tmpvm["vtiger_module"]["idPrefix"] . "x";
        }
        return $idPrefix;
    }

    private function getRefFields($vm) {
        $references = array();
        foreach ($vm["fields"] as $k => $tplfield) {
            if (isset($tplfield["type"]) && $tplfield["type"] === "reference")
            {
                $references[$tplfield["name"]] = $tplfield["refersTo"];
            }
            if (isset($tplfield["type"]) && $tplfield["type"] === "autogenerated")
            {
                $references[$tplfield["name"]] = $this->_analyzedrequest->mainres;
            }
        }
        return $references;
    }

    public function executeGet() {

        $vm = $this->_model->extractByPath($this->_analyzedrequest->mainres);
        $result = "pending";
        $meta = null;
        if ($this->_analyzedrequest->mainresid === "" && empty($this->_analyzedrequest->mainresquerypars) && empty($this->_analyzedrequest->path))
        {
            if (isset($vm["vtiger_module"]))
                $vm = $vm["vtiger_module"];
            else if (isset($vm["custom_description"]))
                $vm = $vm["custom_description"];
            $result = $vm;
            $meta = array("fields" => array());
            $references = $this->getRefFields($vm);
            foreach ($references as $k => $r) {
                $meta["fields"][$k] = array();
                $meta["fields"][$k]["canBe"] = $r;
            }
        }

        //webservice o sql?
        ////webservice
        else if (isset($vm["vtiger_module"]))
        {
            $client = \WolfMVC\Registry::get("VTWStest");
            $vm = $vm["vtiger_module"];
            if (!isset($vm["retrieveable"]) || $vm["retrieveable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }
            $references = $this->getRefFields($vm);
            $WHERE = array();
            //retrieve o query?
            //retrieve
            if (isset($this->_analyzedrequest->mainresid) && !empty($this->_analyzedrequest->mainresid) && ($this->_analyzedrequest->mainresid !== "_ANY_"))
            {
                $meta = array("fields" => array());
                foreach ($this->_analyzedrequest->path as $l => $arr) {
                    $idPrefix = $this->getPrefix($arr["ref"]);
                    foreach ($arr as $k => $v) {
                        if ($k !== "ref")
                            $WHERE [] = array($this->anti_injection($k) => $idPrefix . $this->anti_injection($v));
                    }
                }
                $result = $client->doRetrieve($vm["idPrefix"] . "x" . $this->anti_injection($this->_analyzedrequest->mainresid));
                if (!$result || (is_string($result) && strtolower($result) === "false"))
                {
                    throw new Tsnwexception("No match", 404, null);
                }
                foreach ($WHERE as $l => $arr) {
                    foreach ($arr as $k => $v) {
                        if (isset($result[$k]) && $result[$k] !== $v)
                        {
                            throw new Tsnwexception("No match", 404, null);
                        }
                    }
                }
                foreach ($references as $k => $r) {
                    if (isset($result[$k]))
                    {
                        $tmp = explode("|", $r);
                        $meta["fields"][$k] = array();
                        $meta["fields"][$k]["canBe"] = $r;
                        foreach ($tmp as $kref => $ref) {
                            if (!isset($this->_model->prefixes[$ref]))
                                continue;
                            $prefixGuess = $this->_model->prefixes[$ref];
                            if (strpos($result[$k], $prefixGuess) === 0)
                            {
                                $meta["fields"][$k]["isA"] = $ref;
                                $result[$k] = str_replace($prefixGuess . "x", "", $result[$k]);
                                break;
                            }
                        }
                    }
                }
            }
            //query
            else
            {
                $meta = array();
                $WHERE = array();
                foreach ($this->_analyzedrequest->path as $l => $arr) {
                    $idPrefix = $this->getPrefix($arr["ref"]);
                    foreach ($arr as $k => $v)
                        if ($k !== "ref")
                            $WHERE [] = $this->anti_injection($k) . " = '" . $idPrefix . $this->anti_injection($v) . "'";
                }
                foreach ($this->_analyzedrequest->mainresquerypars as $k => $v)
                    $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                $WHERE = join(" AND ", $WHERE);
                if ($WHERE !== "")
                    $WHERE = " WHERE " . $WHERE;
                $result = $client->doQuery("SELECT * FROM " . ucfirst($vm["name"]) . $WHERE);
                if (is_string($result) && strtolower($result) === "false")
                {
                    throw new Tsnwexception("No match", 404, null);
                }
                if (count($result) === 0)
                {
                    throw new Tsnwexception("No match", 404, null);
                }
                foreach ($result as $kk => $rr) {
                    $meta[$kk] = array("fields" => array());
                    foreach ($references as $k => $r) {
                        if (isset($result[$kk][$k]))
                        {
                            $tmp = explode("|", $r);
                            $meta[$kk]["fields"][$k] = array();
                            $meta[$kk]["fields"][$k]["canBe"] = $r;
                            foreach ($tmp as $kref => $ref) {
                                if (!isset($this->_model->prefixes[$ref]))
                                    continue;
                                $prefixGuess = $this->_model->prefixes[$ref];
                                if (strpos($result[$kk][$k], $prefixGuess) === 0)
                                {

                                    $meta[$kk]["fields"][$k]["isA"] = $ref;
                                    $result[$kk][$k] = str_replace($prefixGuess . "x", "", $result[$kk][$k]);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        //sql
        else if (isset($vm["custom_description"]))
        {
            $meta = array();
            $vm = $vm["custom_description"];
            if (!isset($vm["retrieveable"]) || $vm["retrieveable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }
            $references = $this->getRefFields($vm);
            $sql = "SELECT * FROM " . $vm["tablesforquery"];
            $WHERE = array();
            if ($this->_analyzedrequest->mainresid !== "" && $this->_analyzedrequest->mainresid !== "_ANY_")
            {
                $WHERE[] = $vm["idField"] . " = '" . $this->_analyzedrequest->mainresid . "'";
            }
            else
            {
                foreach ($this->_analyzedrequest->mainresquerypars as $k => $v) {
                    $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                }
            }
            foreach ($this->_analyzedrequest->path as $l => $arr) {
                foreach ($arr as $k => $v) {
                    if ($k !== "ref")
                    {
                        $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                    }
                }
            }
            $WHERE = join(" AND ", $WHERE);
            if ($WHERE !== "")
            {
                $WHERE = " WHERE " . $WHERE;
            }
            $sql .= $WHERE;
            $database = $vm["database"];
            $db = \WolfMVC\Registry::get("database_" . $database);
            $link = new mysqli($db->getHost(), $db->getUsername(), $db->getPassword(), $db->getSchema());
            if ($link->connect_errno)
            {
                throw new Tsnwexception("DB connection error", 500, null);
            }
            $queryresult = $link->query($sql);
            if (!$queryresult)
            {
                throw new Tsnwexception("DB query error", 500, null);
            }
            $result = $queryresult->fetch_all(MYSQLI_ASSOC);
            if (count($result) === 0 || $queryresult->num_rows === 0)
            {
                throw new Tsnwexception("No match", 404, null);
            }
            foreach ($result as $kk => $rr) {
                $meta[$kk] = array("fields" => array());
                foreach ($references as $k => $r) {
                    if (isset($result[$kk][$k]))
                    {
                        $tmp = explode("|", $r);
                        $meta[$kk]["fields"][$k] = array();
                        $meta[$kk]["fields"][$k]["canBe"] = $r;
                        foreach ($tmp as $kref => $ref) {
                            if (!isset($this->_model->prefixes[$ref]))
                                continue;
                            $prefixGuess = $this->_model->prefixes[$ref];
                            if ($prefixGuess === "" || strpos($result[$kk][$k], $prefixGuess) === 0)
                            {

                                $meta[$kk]["fields"][$k]["isA"] = $ref;
                                $result[$kk][$k] = str_replace($prefixGuess . "x", "", $result[$kk][$k]);
                                break;
                            }
                        }
                        if (count($tmp) === 1)
                        {
                            $meta[$kk]["fields"][$k]["isA"] = $r;
                        }
                    }
                }
            }
        }
        $this->_contentType = $this->_analyzedrequest->mainres;
//        return $this->_analyzedrequest;
        return array("result" => $result, "meta" => $meta);
    }

    public function executePost() {

        $vm = $this->_model->extractByPath($this->_analyzedrequest->mainres);
        $result = "pending";
        $newvm = json_decode($this->_analyzedrequest->payload["vm"], true);
//        return $newvm;
        //webservice o sql?
        //webservice
        if (isset($vm["vtiger_module"]))
        {
            $client = \WolfMVC\Registry::get("VTWStest");
            $vm = $vm["vtiger_module"];
            if (!isset($vm["createable"]) || $vm["createable"] !== TRUE)
            {
                throw new Tsnwexception("Can't create such resource", 403, null);
            }
            //controllo vm
            foreach ($vm["fields"] as $k => $tplfield) {
                if ($tplfield["mandatory"])
                {
                    if (!isset($newvm[$tplfield["name"]]) || $newvm[$tplfield["name"]] === "")
                        throw new Tsnwexception("Mandatory field " . $tplfield["name"] . " missing.", 400, null);
                }
                if (!$tplfield["editable"] || $tplfield["type"] === "autogenerated")
                {
                    if (isset($newvm[$tplfield["name"]]) && $newvm[$tplfield["name"]] !== "")
                        throw new Tsnwexception("Field " . $tplfield["name"] . " is autogenerated. Do not fill it!", 400, null);
                }
                if ($tplfield["type"] === "reference" && isset($newvm[$tplfield["name"]]) && $newvm[$tplfield["name"]] !== "")
                {
                    //2 casi:   a. c'è un solo modulo relazionato
//                              b. ci sono più moduli relazionati
                    $refersTo = $tplfield["refersTo"];
                    $refersTo = explode("|", $refersTo);
                    if (!is_array($result))
                    {
                        $result = array();
                    }
                    if (count($refersTo) === 1)
                    {
                        $tmpvm = $this->_model->extractByPath($refersTo[0]);
                        $idPrefix = $tmpvm["vtiger_module"]["idPrefix"];
                        $newvm[$tplfield["name"]] = $idPrefix . "x" . $newvm[$tplfield["name"]];
                    }
                    else // devo capire cosa sto linkando... (gli utenti seguono una numerazione separata e sono sempre singoli??)
                    {
//                        $result[$tplfield["name"]] = array();
                        $possiblePrefixes = array();
                        $db = \WolfMVC\Registry::get("database_vtiger");
                        $link = new mysqli($db->getHost(), $db->getUsername(), $db->getPassword(), $db->getSchema());
                        if ($link->connect_errno)
                        {
                            throw new Tsnwexception("DB connection error", 500, null);
                        }
                        foreach ($refersTo as $refk => $ref) {
                            $tmpvm = $this->_model->extractByPath($ref);
                            $possiblePrefixes[] = "'" . $tmpvm["vtiger_module"]["idPrefix"] . "'";
//                            $result[$tplfield["name"]][] = $res;
                        }
                        $possiblePrefixes = join(",", $possiblePrefixes);

                        $sql = "SELECT b.id as idPrefix FROM vtiger_crmentity a " .
                                "LEFT JOIN vtiger_ws_entity b ON (a.setype = b.name) " .
                                "where a.crmid = '{$newvm[$tplfield["name"]]}' AND a.deleted='0'"
                                . " AND b.id IN ({$possiblePrefixes})";
                        $queryresult = $link->query($sql);
                        if (!$queryresult)
                        {
                            throw new Tsnwexception("DB query error", 500, null);
                        }
                        $res = $queryresult->fetch_all(MYSQLI_ASSOC);
                        if (count($res) === 0 || !isset($res[0]["idPrefix"]))
                        {
                            throw new Tsnwexception("Invalid reference in field {$newvm[$tplfield["name"]]}.", 400, null);
                        }
                        else
                        {
                            $idPrefix = $res[0]["idPrefix"];
                            $newvm[$tplfield["name"]] = $idPrefix . "x" . $newvm[$tplfield["name"]];
                        }
                    }
                }
            }
            $result = $client->doCreate(ucfirst($vm["name"]), $newvm);
            if (!$result)
            {
                throw new Tsnwexception("Creation was not performed due to some unknown error.", 404, null);
            }

            $references = $this->getRefFields($vm);
            foreach ($references as $k => $r) {
                if (isset($result[$k]))
                {
                    $tmp = explode("|", $r);
                    $meta[$kk]["fields"][$k] = array();
                    $meta[$kk]["fields"][$k]["canBe"] = $r;
                    foreach ($tmp as $kref => $ref) {
                        $prefixGuess = $this->_model->prefixes[$ref];
                        if ($prefixGuess === "" || strpos($result[$kk][$k], $prefixGuess) === 0)
                        {

                            $meta[$kk]["fields"][$k]["isA"] = $ref;
                            $result[$kk][$k] = str_replace($prefixGuess . "x", "", $result[$kk][$k]);
                            break;
                        }
                    }
                    if (count($tmp) === 1)
                    {
                        $meta[$kk]["fields"][$k]["isA"] = $r;
                    }
                }
            }
        }


        //sql
        else if (isset($vm["custom_description"]))
        {
            $vm = $vm["custom_description"];
            if (!isset($vm["createable"]) || $vm["createable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }
            //controllo vm
            foreach ($vm["fields"] as $k => $tplfield) {
                if ($tplfield["mandatory"])
                {
                    if (!isset($newvm[$tplfield["name"]]) || $newvm[$tplfield["name"]] === "")
                        throw new Tsnwexception("Mandatory field " . $tplfield["name"] . " missing.", 400, null);
                }
                if (!$tplfield["editable"] || (isset($tplfield["type"]) && $tplfield["type"] === "autogenerated"))
                {
                    if (isset($newvm[$tplfield["name"]]) && $newvm[$tplfield["name"]] !== "")
                        throw new Tsnwexception("Field " . $tplfield["name"] . " is autogenerated. Do not fill it!", 400, null);
                }
            }
            $sql = "INSERT INTO " . $vm["tables"]["list"][$vm["tables"]["structure"][0]]; // create solo su tabelle singole!!!!
            $fields = array();
            $values = array();
            foreach ($newvm as $k => $v) {
                $fields[] = $k;
                $values[] = "'" . $v . "'";
            }
            $sql.= " (" . join(",", $fields) . ") VALUES (" . join(",", $values) . ")";
//            $result = $sql;
            $database = $vm["database"];
            $db = \WolfMVC\Registry::get("database_" . $database);
            $link = new mysqli($db->getHost(), $db->getUsername(), $db->getPassword(), $db->getSchema());
            if ($link->connect_errno)
            {
                throw new Tsnwexception("DB connection error", 500, null);
            }
            $queryresult = $link->query($sql);
            if (!$queryresult)
            {
                throw new Tsnwexception("DB query error " . $link->error . "<br>\n" . $sql, 500, null);
            }
            if (isset($vm["idField"]) && isset($newvm[$vm["idField"]]))
            {
                $newvm[$vm["idField"]] = $link->insert_id;
            }
            $result = $newvm;
        }
        return $result;
    }

    public function executePut() {
        $vm = $this->_model->extractByPath($this->_analyzedrequest->mainres);
        $result = "pending";
        $newvm = $this->_analyzedrequest->payload;
        //webservice o sql?
        ////webservice
        if (isset($vm["vtiger_module"]))
        {
            $client = \WolfMVC\Registry::get("VTWStest");
            $vm = $vm["vtiger_module"];
            if (!isset($vm["updateable"]) || $vm["updateable"] !== TRUE)
            {
                throw new Tsnwexception("Can't update this resource", 403, null);
            }
            $idPrefix = $vm["idPrefix"];
            $previous = $client->doRetrieve($idPrefix . "x" . $this->_analyzedrequest->mainresid);
            if (!$previous)
            {
                throw new Tsnwexception("Can't find this resource", 403, null);
            }
            else
            {
                $diffs = array();
                foreach ($previous as $k => $p) {
                    $diffs[$k] = isset($newvm[$k]) && ($newvm[$k] !== $p);
                }
            }
            foreach ($vm["fields"] as $k => $tplfield) {
                if (!(isset($diffs[$tplfield["name"]])) || !$diffs[$tplfield["name"]])
                    continue;
                if ($tplfield["mandatory"] && $newvm[$tplfield["name"]] === "")
                {
                    throw new Tsnwexception("Field {$tplfield["name"]} can't be empty!", 400, null);
                }
                if (!$tplfield["editable"] && $newvm[$tplfield["name"]] !== $previous[$tplfield["name"]])
                {
                    $newvm[$tplfield["name"]] = $previous[$tplfield["name"]];
                }
            }
            $result = $client->doUpdate($newvm);
            if (!$result)
            {
                throw new Tsnwexception("Can't update this resource due to some error: " . print_r($client->lastError(), true) . "  " . $previous["modifiedby"] . "  " . $newvm["modifiedby"], 500, null);
            }
            return $result;
        }


        //sql
        else if (isset($vm["custom_description"]))
        {
            $vm = $vm["custom_description"];
            if (!isset($vm["retrieveable"]) || $vm["retrieveable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }

            $sql = "SELECT * FROM " . $vm["tablesforquery"];
            $WHERE = array();
            if ($this->_analyzedrequest->mainresid !== "")
            {
                $WHERE[] = $vm["idField"] . " = '" . $this->_analyzedrequest->mainresid . "'";
            }
            else
            {
                foreach ($this->_analyzedrequest->mainresquerypars as $k => $v) {
                    $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                }
            }
            foreach ($this->_analyzedrequest->path as $l => $arr) {
                foreach ($arr as $k => $v) {
                    if ($k !== "ref")
                    {
                        $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                    }
                }
            }
            $WHERE = join(" AND ", $WHERE);
            if ($WHERE !== "")
            {
                $WHERE = " WHERE " . $WHERE;
            }
            $sql .= $WHERE;
            $database = $vm["database"];
            $db = \WolfMVC\Registry::get("database_" . $database);
            $link = new mysqli($db->getHost(), $db->getUsername(), $db->getPassword(), $db->getSchema());
            if ($link->connect_errno)
            {
                throw new Tsnwexception("DB connection error", 500, null);
            }
            $queryresult = $link->query($sql);
            if (!$queryresult)
            {
                throw new Tsnwexception("DB query error", 500, null);
            }
            $result = $queryresult->fetch_all(MYSQLI_ASSOC);
            if (count($result) === 0 || $queryresult->num_rows === 0)
            {
                throw new Tsnwexception("No match", 404, null);
            }
        }
        return $result;
    }

    public function executeDelete() {

        $vm = $this->_model->extractByPath($this->_analyzedrequest->mainres);
        $result = "pending";
        //webservice o sql?
        ////webservice
        if (isset($vm["vtiger_module"]))
        {
            $client = \WolfMVC\Registry::get("VTWStest");
            $vm = $vm["vtiger_module"];
            if (!isset($vm["retrieveable"]) || $vm["retrieveable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }
            //retrieve o query?
            //retrieve
            if (isset($this->_analyzedrequest->mainresid) && !empty($this->_analyzedrequest->mainresid))
            {
//                $result = "Faccio un retrieve con i WS.";
//                $result .= " Cerco ".$vm["idPrefix"]."x".$this->_analyzedrequest->mainresid;
                foreach ($this->_analyzedrequest->path as $l => $arr) {
                    $idPrefix = "";
                    foreach ($arr as $k => $v) {
                        if ($k === "ref")
                        {
                            $tmpvm = $this->_model->extractByPath($v);
                            if ($tmpvm && isset($tmpvm["vtiger_module"]) && isset($tmpvm["vtiger_module"]["idPrefix"]))
                            {
                                $idPrefix = $tmpvm["vtiger_module"]["idPrefix"] . "x";
                            }
                        }
                    }
                    foreach ($arr as $k => $v) {
                        if ($k !== "ref")
                        {
                            $WHERE [] = array($this->anti_injection($k) => $idPrefix . $this->anti_injection($v));
                        }
                    }
                }
                $result = $client->doRetrieve($vm["idPrefix"] . "x" . $this->anti_injection($this->_analyzedrequest->mainresid));
                if (!$result || (is_string($result) && strtolower($result) === "false"))
                {
                    throw new Tsnwexception("No match", 404, null);
                }
                foreach ($WHERE as $l => $arr) {
                    foreach ($arr as $k => $v) {
                        if (isset($result[$k]) && $result[$k] !== $v)
                        {
                            throw new Tsnwexception("No match", 404, null);
                        }
                    }
                }
            }

            //query
            else
            {
                $result = "Faccio una query con i WS.";
//                $result = print_r($this->_analyzedrequest->path,true);
                $WHERE = array();
                foreach ($this->_analyzedrequest->path as $l => $arr) {
                    $idPrefix = "";
                    foreach ($arr as $k => $v) {
                        if ($k === "ref")
                        {
                            $tmpvm = $this->_model->extractByPath($v);
                            if ($tmpvm && isset($tmpvm["vtiger_module"]) && isset($tmpvm["vtiger_module"]["idPrefix"]))
                            {
                                $idPrefix = $tmpvm["vtiger_module"]["idPrefix"] . "x";
                            }
                        }
                    }
                    foreach ($arr as $k => $v) {
                        if ($k !== "ref")
                        {
                            $WHERE [] = $this->anti_injection($k) . " = '" . $idPrefix . $this->anti_injection($v) . "'";
                        }
                    }
                }
                foreach ($this->_analyzedrequest->mainresquerypars as $k => $v) {
                    $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                }
                $WHERE = join(" AND ", $WHERE);
                if ($WHERE !== "")
                    $WHERE = " WHERE " . $WHERE;
//                $result = "SELECT * FROM " . ucfirst($vm["name"]) . $WHERE;
                $result = $client->doQuery("SELECT * FROM " . ucfirst($vm["name"]) . $WHERE);
                if (is_string($result) && strtolower($result) === "false")
                {
                    throw new Tsnwexception("No match", 404, null);
                }
                if (count($result) === 0)
                {
                    throw new Tsnwexception("No match", 404, null);
                }
            }
        }


        //sql
        else if (isset($vm["custom_description"]))
        {
            $vm = $vm["custom_description"];
            if (!isset($vm["retrieveable"]) || $vm["retrieveable"] !== TRUE)
            {
                throw new Tsnwexception("Can't retrieve this resource", 403, null);
            }

            $sql = "SELECT * FROM " . $vm["tablesforquery"];
            $WHERE = array();
            if ($this->_analyzedrequest->mainresid !== "")
            {
                $WHERE[] = $vm["idField"] . " = '" . $this->_analyzedrequest->mainresid . "'";
            }
            else
            {
                foreach ($this->_analyzedrequest->mainresquerypars as $k => $v) {
                    $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                }
            }
            foreach ($this->_analyzedrequest->path as $l => $arr) {
                foreach ($arr as $k => $v) {
                    if ($k !== "ref")
                    {
                        $WHERE [] = $this->anti_injection($k) . " = '" . $this->anti_injection($v) . "'";
                    }
                }
            }
            $WHERE = join(" AND ", $WHERE);
            if ($WHERE !== "")
            {
                $WHERE = " WHERE " . $WHERE;
            }
            $sql .= $WHERE;
            $database = $vm["database"];
            $db = \WolfMVC\Registry::get("database_" . $database);
            $link = new mysqli($db->getHost(), $db->getUsername(), $db->getPassword(), $db->getSchema());
            if ($link->connect_errno)
            {
                throw new Tsnwexception("DB connection error", 500, null);
            }
            $queryresult = $link->query($sql);
            if (!$queryresult)
            {
                throw new Tsnwexception("DB query error", 500, null);
            }
            $result = $queryresult->fetch_all(MYSQLI_ASSOC);
            if (count($result) === 0 || $queryresult->num_rows === 0)
            {
                throw new Tsnwexception("No match", 404, null);
            }
        }
        return $result;
    }

}
?>

